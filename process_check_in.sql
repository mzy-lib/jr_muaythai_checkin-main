CREATE OR REPLACE FUNCTION process_check_in() RETURNS trigger AS $$ DECLARE v_member members; v_card membership_cards; BEGIN SELECT * INTO v_member FROM members WHERE id = NEW.member_id FOR NO KEY UPDATE; IF NEW.card_id IS NOT NULL AND NOT NEW.is_extra THEN SELECT * INTO v_card FROM membership_cards WHERE id = NEW.card_id FOR UPDATE; IF FOUND THEN IF v_card.card_type = 'group' AND v_card.card_category = 'session' THEN UPDATE membership_cards SET remaining_group_sessions = remaining_group_sessions - 1 WHERE id = NEW.card_id; ELSIF v_card.card_type = 'private' THEN UPDATE membership_cards SET remaining_private_sessions = remaining_private_sessions - 1 WHERE id = NEW.card_id; END IF; END IF; END IF; UPDATE members SET extra_check_ins = CASE WHEN NEW.is_extra THEN extra_check_ins + 1 ELSE extra_check_ins END, last_check_in_date = NEW.check_in_date WHERE id = NEW.member_id; INSERT INTO debug_logs (function_name, message, member_id, details) VALUES ('process_check_in', '处理完成', NEW.member_id, jsonb_build_object('check_in_date', NEW.check_in_date, 'class_type', NEW.class_type, 'is_extra', NEW.is_extra, 'card_id', NEW.card_id, 'card_info', CASE WHEN v_card.id IS NOT NULL THEN jsonb_build_object('card_type', v_card.card_type, 'card_category', v_card.card_category, 'card_subtype', v_card.card_subtype, 'remaining_group_sessions', v_card.remaining_group_sessions, 'remaining_private_sessions', v_card.remaining_private_sessions) ELSE NULL END)); RETURN NULL; END; $$ LANGUAGE plpgsql;
