-- 清理测试数据
DELETE FROM check_ins WHERE member_id IN (
  SELECT id FROM members WHERE name LIKE 'test_class%'
);
DELETE FROM members WHERE name LIKE 'test_class%';

-- 创建测试会员
INSERT INTO members (name, membership, remaining_classes)
VALUES 
  ('test_class_single', 'single_class', 1),
  ('test_class_two', 'two_classes', 2),
  ('test_class_ten', 'ten_classes', 10);

-- 测试签到
-- test_class_single: 测试单次卡
INSERT INTO check_ins (member_id, check_in_date, class_type)
SELECT 
  id,
  '2025-01-15'::date,
  'morning'::class_type
FROM members 
WHERE name = 'test_class_single';

INSERT INTO check_ins (member_id, check_in_date, class_type)
SELECT 
  id,
  '2025-01-15'::date,
  'evening'::class_type
FROM members 
WHERE name = 'test_class_single';

-- test_class_two: 测试双次卡
INSERT INTO check_ins (member_id, check_in_date, class_type)
SELECT 
  id,
  '2025-01-15'::date,
  'morning'::class_type
FROM members 
WHERE name = 'test_class_two';

INSERT INTO check_ins (member_id, check_in_date, class_type)
SELECT 
  id,
  '2025-01-15'::date,
  'evening'::class_type
FROM members 
WHERE name = 'test_class_two';

INSERT INTO check_ins (member_id, check_in_date, class_type)
SELECT 
  id,
  '2025-01-16'::date,
  'morning'::class_type
FROM members 
WHERE name = 'test_class_two';

-- test_class_ten: 测试十次卡
-- 连续5天，每天早晚各一次签到
WITH dates AS (
  SELECT generate_series('2025-01-15'::date, '2025-01-19'::date, '1 day'::interval) AS check_in_date
)
INSERT INTO check_ins (member_id, check_in_date, class_type)
SELECT 
  m.id,
  d.check_in_date,
  class_type
FROM members m
CROSS JOIN dates d
CROSS JOIN (VALUES ('morning'::class_type), ('evening'::class_type)) AS t(class_type)
WHERE m.name = 'test_class_ten'
ORDER BY d.check_in_date, class_type;

-- 额外测试一天
INSERT INTO check_ins (member_id, check_in_date, class_type)
SELECT 
  id,
  
  '2025-01-20'::date,
  'morning'::class_type
FROM members 
WHERE name = 'test_class_ten';

-- 查看测试结果
SELECT 
  m.name,
  m.membership,
  m.remaining_classes,
  COUNT(*) FILTER (WHERE NOT c.is_extra) as normal_checkins,
  COUNT(*) FILTER (WHERE c.is_extra) as extra_checkins,
  string_agg(
    c.check_in_date::text || ' ' || c.class_type::text || 
    CASE WHEN c.is_extra THEN ' 额外' ELSE ' 正常' END,
    E'\n' ORDER BY c.check_in_date, c.class_type
  ) as check_in_details
FROM members m
JOIN check_ins c ON c.member_id = m.id
WHERE m.name LIKE 'test_class%'
GROUP BY m.id, m.name, m.membership, m.remaining_classes
ORDER BY m.name;